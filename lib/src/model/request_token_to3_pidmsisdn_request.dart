//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'request_token_to3_pidmsisdn_request.g.dart';

/// RequestTokenTo3PIDMSISDNRequest
///
/// Properties:
/// * [clientSecret] - A unique string generated by the client, and used to identify the validation attempt. It must be a string consisting of the characters `[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it must not be empty. 
/// * [country] - The two-letter uppercase ISO-3166-1 alpha-2 country code that the number in `phone_number` should be parsed as if it were dialled from.
/// * [nextLink] - Optional. When the validation is completed, the identity server will redirect the user to this URL. This option is ignored when submitting 3PID validation information through a POST request.
/// * [phoneNumber] - The phone number to validate.
/// * [sendAttempt] - The server will only send an SMS if the `send_attempt` is a number greater than the most recent one which it has seen, scoped to that `country` + `phone_number` + `client_secret` triple. This is to avoid repeatedly sending the same SMS in the case of request retries between the POSTing user and the identity server. The client should increment this value if they desire a new SMS (e.g. a reminder) to be sent.
/// * [idAccessToken] - An access token previously registered with the identity server. Servers can treat this as optional to distinguish between r0.5-compatible clients and this specification version.  Required if an `id_server` is supplied.
/// * [idServer] - The hostname of the identity server to communicate with. May optionally include a port. This parameter is ignored when the homeserver handles 3PID verification.  This parameter is deprecated with a plan to be removed in a future specification version for `/account/password` and `/register` requests.
@BuiltValue()
abstract class RequestTokenTo3PIDMSISDNRequest implements Built<RequestTokenTo3PIDMSISDNRequest, RequestTokenTo3PIDMSISDNRequestBuilder> {
  /// A unique string generated by the client, and used to identify the validation attempt. It must be a string consisting of the characters `[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it must not be empty. 
  @BuiltValueField(wireName: r'client_secret')
  String get clientSecret;

  /// The two-letter uppercase ISO-3166-1 alpha-2 country code that the number in `phone_number` should be parsed as if it were dialled from.
  @BuiltValueField(wireName: r'country')
  String get country;

  /// Optional. When the validation is completed, the identity server will redirect the user to this URL. This option is ignored when submitting 3PID validation information through a POST request.
  @BuiltValueField(wireName: r'next_link')
  String? get nextLink;

  /// The phone number to validate.
  @BuiltValueField(wireName: r'phone_number')
  String get phoneNumber;

  /// The server will only send an SMS if the `send_attempt` is a number greater than the most recent one which it has seen, scoped to that `country` + `phone_number` + `client_secret` triple. This is to avoid repeatedly sending the same SMS in the case of request retries between the POSTing user and the identity server. The client should increment this value if they desire a new SMS (e.g. a reminder) to be sent.
  @BuiltValueField(wireName: r'send_attempt')
  int get sendAttempt;

  /// An access token previously registered with the identity server. Servers can treat this as optional to distinguish between r0.5-compatible clients and this specification version.  Required if an `id_server` is supplied.
  @BuiltValueField(wireName: r'id_access_token')
  String? get idAccessToken;

  /// The hostname of the identity server to communicate with. May optionally include a port. This parameter is ignored when the homeserver handles 3PID verification.  This parameter is deprecated with a plan to be removed in a future specification version for `/account/password` and `/register` requests.
  @BuiltValueField(wireName: r'id_server')
  String? get idServer;

  RequestTokenTo3PIDMSISDNRequest._();

  factory RequestTokenTo3PIDMSISDNRequest([void updates(RequestTokenTo3PIDMSISDNRequestBuilder b)]) = _$RequestTokenTo3PIDMSISDNRequest;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(RequestTokenTo3PIDMSISDNRequestBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<RequestTokenTo3PIDMSISDNRequest> get serializer => _$RequestTokenTo3PIDMSISDNRequestSerializer();
}

class _$RequestTokenTo3PIDMSISDNRequestSerializer implements PrimitiveSerializer<RequestTokenTo3PIDMSISDNRequest> {
  @override
  final Iterable<Type> types = const [RequestTokenTo3PIDMSISDNRequest, _$RequestTokenTo3PIDMSISDNRequest];

  @override
  final String wireName = r'RequestTokenTo3PIDMSISDNRequest';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    RequestTokenTo3PIDMSISDNRequest object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    yield r'client_secret';
    yield serializers.serialize(
      object.clientSecret,
      specifiedType: const FullType(String),
    );
    yield r'country';
    yield serializers.serialize(
      object.country,
      specifiedType: const FullType(String),
    );
    if (object.nextLink != null) {
      yield r'next_link';
      yield serializers.serialize(
        object.nextLink,
        specifiedType: const FullType(String),
      );
    }
    yield r'phone_number';
    yield serializers.serialize(
      object.phoneNumber,
      specifiedType: const FullType(String),
    );
    yield r'send_attempt';
    yield serializers.serialize(
      object.sendAttempt,
      specifiedType: const FullType(int),
    );
    if (object.idAccessToken != null) {
      yield r'id_access_token';
      yield serializers.serialize(
        object.idAccessToken,
        specifiedType: const FullType(String),
      );
    }
    if (object.idServer != null) {
      yield r'id_server';
      yield serializers.serialize(
        object.idServer,
        specifiedType: const FullType(String),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    RequestTokenTo3PIDMSISDNRequest object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required RequestTokenTo3PIDMSISDNRequestBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'client_secret':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.clientSecret = valueDes;
          break;
        case r'country':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.country = valueDes;
          break;
        case r'next_link':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.nextLink = valueDes;
          break;
        case r'phone_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.phoneNumber = valueDes;
          break;
        case r'send_attempt':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.sendAttempt = valueDes;
          break;
        case r'id_access_token':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.idAccessToken = valueDes;
          break;
        case r'id_server':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.idServer = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  RequestTokenTo3PIDMSISDNRequest deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = RequestTokenTo3PIDMSISDNRequestBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

