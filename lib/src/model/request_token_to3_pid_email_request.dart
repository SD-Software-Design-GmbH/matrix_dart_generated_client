//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'request_token_to3_pid_email_request.g.dart';

/// RequestTokenTo3PIDEmailRequest
///
/// Properties:
/// * [clientSecret] - A unique string generated by the client, and used to identify the validation attempt. It must be a string consisting of the characters `[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it must not be empty. 
/// * [email] - The email address to validate.
/// * [nextLink] - Optional. When the validation is completed, the identity server will redirect the user to this URL. This option is ignored when submitting 3PID validation information through a POST request.
/// * [sendAttempt] - The server will only send an email if the `send_attempt` is a number greater than the most recent one which it has seen, scoped to that `email` + `client_secret` pair. This is to avoid repeatedly sending the same email in the case of request retries between the POSTing user and the identity server. The client should increment this value if they desire a new email (e.g. a reminder) to be sent. If they do not, the server should respond with success but not resend the email.
/// * [idAccessToken] - An access token previously registered with the identity server. Servers can treat this as optional to distinguish between r0.5-compatible clients and this specification version.  Required if an `id_server` is supplied.
/// * [idServer] - The hostname of the identity server to communicate with. May optionally include a port. This parameter is ignored when the homeserver handles 3PID verification.  This parameter is deprecated with a plan to be removed in a future specification version for `/account/password` and `/register` requests.
@BuiltValue()
abstract class RequestTokenTo3PIDEmailRequest implements Built<RequestTokenTo3PIDEmailRequest, RequestTokenTo3PIDEmailRequestBuilder> {
  /// A unique string generated by the client, and used to identify the validation attempt. It must be a string consisting of the characters `[0-9a-zA-Z.=_-]`. Its length must not exceed 255 characters and it must not be empty. 
  @BuiltValueField(wireName: r'client_secret')
  String get clientSecret;

  /// The email address to validate.
  @BuiltValueField(wireName: r'email')
  String get email;

  /// Optional. When the validation is completed, the identity server will redirect the user to this URL. This option is ignored when submitting 3PID validation information through a POST request.
  @BuiltValueField(wireName: r'next_link')
  String? get nextLink;

  /// The server will only send an email if the `send_attempt` is a number greater than the most recent one which it has seen, scoped to that `email` + `client_secret` pair. This is to avoid repeatedly sending the same email in the case of request retries between the POSTing user and the identity server. The client should increment this value if they desire a new email (e.g. a reminder) to be sent. If they do not, the server should respond with success but not resend the email.
  @BuiltValueField(wireName: r'send_attempt')
  int get sendAttempt;

  /// An access token previously registered with the identity server. Servers can treat this as optional to distinguish between r0.5-compatible clients and this specification version.  Required if an `id_server` is supplied.
  @BuiltValueField(wireName: r'id_access_token')
  String? get idAccessToken;

  /// The hostname of the identity server to communicate with. May optionally include a port. This parameter is ignored when the homeserver handles 3PID verification.  This parameter is deprecated with a plan to be removed in a future specification version for `/account/password` and `/register` requests.
  @BuiltValueField(wireName: r'id_server')
  String? get idServer;

  RequestTokenTo3PIDEmailRequest._();

  factory RequestTokenTo3PIDEmailRequest([void updates(RequestTokenTo3PIDEmailRequestBuilder b)]) = _$RequestTokenTo3PIDEmailRequest;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(RequestTokenTo3PIDEmailRequestBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<RequestTokenTo3PIDEmailRequest> get serializer => _$RequestTokenTo3PIDEmailRequestSerializer();
}

class _$RequestTokenTo3PIDEmailRequestSerializer implements PrimitiveSerializer<RequestTokenTo3PIDEmailRequest> {
  @override
  final Iterable<Type> types = const [RequestTokenTo3PIDEmailRequest, _$RequestTokenTo3PIDEmailRequest];

  @override
  final String wireName = r'RequestTokenTo3PIDEmailRequest';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    RequestTokenTo3PIDEmailRequest object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    yield r'client_secret';
    yield serializers.serialize(
      object.clientSecret,
      specifiedType: const FullType(String),
    );
    yield r'email';
    yield serializers.serialize(
      object.email,
      specifiedType: const FullType(String),
    );
    if (object.nextLink != null) {
      yield r'next_link';
      yield serializers.serialize(
        object.nextLink,
        specifiedType: const FullType(String),
      );
    }
    yield r'send_attempt';
    yield serializers.serialize(
      object.sendAttempt,
      specifiedType: const FullType(int),
    );
    if (object.idAccessToken != null) {
      yield r'id_access_token';
      yield serializers.serialize(
        object.idAccessToken,
        specifiedType: const FullType(String),
      );
    }
    if (object.idServer != null) {
      yield r'id_server';
      yield serializers.serialize(
        object.idServer,
        specifiedType: const FullType(String),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    RequestTokenTo3PIDEmailRequest object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required RequestTokenTo3PIDEmailRequestBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'client_secret':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.clientSecret = valueDes;
          break;
        case r'email':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.email = valueDes;
          break;
        case r'next_link':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.nextLink = valueDes;
          break;
        case r'send_attempt':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.sendAttempt = valueDes;
          break;
        case r'id_access_token':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.idAccessToken = valueDes;
          break;
        case r'id_server':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.idServer = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  RequestTokenTo3PIDEmailRequest deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = RequestTokenTo3PIDEmailRequestBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

